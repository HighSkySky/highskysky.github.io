{"version":3,"sources":["components/blog-header/index.module.scss","components/blog-footer/index.module.scss","components/blog-header/config.ts","components/blog-header/index.tsx","components/blog-footer/index.tsx","routes/index.tsx","app.tsx","utils/serviceWorker.ts","index.tsx"],"names":["module","exports","navList","title","link","BlogHeader","react_default","a","createElement","className","styles","map","_ref","key","react_router_dom","to","memo","year","Date","getFullYear","routes","path","component","__webpack_require__","e","then","bind","App","blog_header","react","fallback","react_router","lazy","blog_footer","Boolean","window","location","hostname","match","ReactDOM","render","src_app","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EACAA,EAAAC,QAAA,CAAkBD,OAAA,iDCAlBA,EAAAC,QAAA,CAAkBD,OAAA,iLCDLE,EAAU,CACrB,CACEC,MAAO,eACPC,KAAM,SAER,CACED,MAAO,eACPC,KAAM,YAER,CACED,MAAO,eACPC,KAAM,SAER,CACED,MAAO,eACPC,KAAM,YAER,CACED,MAAO,eACPC,KAAM,4BCKKC,EAlBkB,WAC/B,OACEC,EAAAC,EAAAC,cAAA,UAAQC,UAAWC,IAAOV,QACxBM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,6BACXP,EAAQS,IAAI,SAAAC,GAAA,IAAGT,EAAHS,EAAGT,MAAOC,EAAVQ,EAAUR,KAAV,OACXE,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBAAkBI,IAAKV,GACnCG,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAASL,UAAU,uBAAuBM,GAAIX,GAC3CD,2BCHFa,iBAPkB,WAC/B,IACMC,GADO,IAAIC,MACCC,cAElB,OAAOb,EAAAC,EAAAC,cAAA,UAAQC,UAAWC,IAAOV,QAA1B,sBAAmDiB,KCD7CG,EAPA,CACb,CACEC,KAAM,IACNC,UAAW,kBAAMC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,aCwBNC,eAlBO,WACpB,OACErB,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACER,EAAAC,EAAAC,cAACoB,EAAD,MACAtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAACqB,EAAA,SAAD,CAAUC,SAAUxB,EAAAC,EAAAC,cAAA,0BAClBF,EAAAC,EAAAC,cAACuB,EAAA,EAAD,KACGX,EAAOT,IAAI,SAAAC,GAAA,IAAGS,EAAHT,EAAGS,KAAMC,EAATV,EAASU,UAAT,OACVhB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAOlB,IAAKQ,EAAMA,KAAMA,EAAMC,UAAWU,eAAKV,UAKtDhB,EAAAC,EAAAC,cAACyB,EAAD,SCVcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASC,SAASC,eAAe,SDoI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAACsB,GAClCA,EAAaC","file":"static/js/main.1af6ee97.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"module\":\"blog-header_module__sbWFS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"module\":\"blog-footer_module__VTJfE\"};","export const navList = [\n  {\n    title: '首页',\n    link: '/home'\n  },\n  {\n    title: '文章',\n    link: '/article'\n  },\n  {\n    title: '应用',\n    link: '/demo'\n  },\n  {\n    title: '留言',\n    link: '/message'\n  },\n  {\n    title: '关于',\n    link: '/about'\n  }\n];\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { navList } from './config';\n\nimport styles from './index.module.scss';\n\nconst BlogHeader: React.FC<{}> = () => {\n  return (\n    <header className={styles.module}>\n      <div className=\"header-content\">\n        <ul className=\"header-content-right flex\">\n          {navList.map(({ title, link }) => (\n            <li className=\"header-nav-item\" key={title}>\n              <NavLink className=\"header-nav-item-link\" to={link}>\n                {title}\n              </NavLink>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </header>\n  );\n};\n\nexport default BlogHeader;\n","import React, { memo } from 'react';\n\nimport styles from './index.module.scss';\n\nconst BlogFooter: React.FC<{}> = () => {\n  const date = new Date();\n  const year = date.getFullYear();\n\n  return <footer className={styles.module}>Copyright© 2019-{year}</footer>;\n};\n\nexport default memo(BlogFooter);\n","const routes = [\n  {\n    path: '*',\n    component: () => import('@/pages/home')\n  }\n];\n\nexport default routes;\n","import React, { Suspense, lazy } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport BlogHeader from './components/blog-header';\nimport BlogFooter from './components/blog-footer';\nimport routes from './routes';\n\nimport 'antd/lib/style';\nimport './style/app.scss';\n\nconst App: React.FC = () => {\n  return (\n    <BrowserRouter>\n      <BlogHeader />\n      <div className=\"app-content\">\n        <Suspense fallback={<div>loading...</div>}>\n          <Switch>\n            {routes.map(({ path, component }) => (\n              <Route key={path} path={path} component={lazy(component)} />\n            ))}\n          </Switch>\n        </Suspense>\n      </div>\n      <BlogFooter />\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app';\nimport * as serviceWorker from './utils/serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}